// <auto-generated />
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("API.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommuneName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommuneName", "DistrictName");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("API.Entities.Commune", b =>
                {
                    b.Property<string>("CommuneName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("TEXT");

                    b.HasKey("CommuneName", "DistrictName");

                    b.ToTable("Communes");
                });

            modelBuilder.Entity("API.Entities.Norm", b =>
                {
                    b.Property<string>("ParamCode")
                        .HasColumnType("TEXT");

                    b.Property<double>("ParamNorm")
                        .HasColumnType("REAL");

                    b.HasKey("ParamCode");

                    b.ToTable("Norms");
                });

            modelBuilder.Entity("API.Entities.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("TEXT");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("GegrLat")
                        .HasColumnType("REAL");

                    b.Property<double>("GegrLon")
                        .HasColumnType("REAL");

                    b.Property<string>("StationName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("API.Entities.City", b =>
                {
                    b.HasOne("API.Entities.Commune", "Commune")
                        .WithMany("Cities")
                        .HasForeignKey("CommuneName", "DistrictName");

                    b.Navigation("Commune");
                });

            modelBuilder.Entity("API.Entities.Station", b =>
                {
                    b.HasOne("API.Entities.City", "City")
                        .WithMany("Stations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("API.Entities.City", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("API.Entities.Commune", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
