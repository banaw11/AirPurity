// <auto-generated />
using System;
using AirPurity.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AirPurity.API.Data.Migrations.PostgreSqlMigrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AirPurity.API.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommuneId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.Commune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CommuneName")
                        .HasColumnType("text");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Communes");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DistrictName")
                        .HasColumnType("text");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.Norm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ParamCode")
                        .HasColumnType("text");

                    b.Property<double>("ParamNorm")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Norms");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("IndexLevelId")
                        .HasColumnType("integer");

                    b.Property<int?>("LastIndexLevelId")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationUserId")
                        .HasColumnType("integer");

                    b.Property<int>("StationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NotificationUserId");

                    b.HasIndex("StationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.NotificationSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IndexLevelId")
                        .HasColumnType("integer");

                    b.Property<int?>("LastIndexLevelId")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<string>("ParamCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationSubjects");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.NotificationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("EmailConfirmationToken")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("StopNotificationToken")
                        .HasColumnType("uuid");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ProvinceName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressStreet")
                        .HasColumnType("text");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<double>("GegrLat")
                        .HasColumnType("double precision");

                    b.Property<double>("GegrLon")
                        .HasColumnType("double precision");

                    b.Property<string>("StationName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.City", b =>
                {
                    b.HasOne("AirPurity.API.Data.Entities.Commune", "Commune")
                        .WithMany("Cities")
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commune");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.Commune", b =>
                {
                    b.HasOne("AirPurity.API.Data.Entities.District", "District")
                        .WithMany("Communes")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.District", b =>
                {
                    b.HasOne("AirPurity.API.Data.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.Notification", b =>
                {
                    b.HasOne("AirPurity.API.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirPurity.API.Data.Entities.NotificationUser", "NotificationUser")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirPurity.API.Data.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("NotificationUser");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.NotificationSubject", b =>
                {
                    b.HasOne("AirPurity.API.Data.Entities.Notification", "Notification")
                        .WithMany("NotificationSubjects")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.Station", b =>
                {
                    b.HasOne("AirPurity.API.Data.Entities.City", "City")
                        .WithMany("Stations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.City", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.Commune", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.District", b =>
                {
                    b.Navigation("Communes");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.Notification", b =>
                {
                    b.Navigation("NotificationSubjects");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.NotificationUser", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("AirPurity.API.Data.Entities.Province", b =>
                {
                    b.Navigation("Districts");
                });
#pragma warning restore 612, 618
        }
    }
}
